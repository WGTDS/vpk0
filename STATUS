.
.   Project Status
.
    18 May 2022

    Stalemate.

    Being a self-taught programmer who's never been good at math,
    the challenging part, now, is devising, or rather deciphering,
    the routine to sort and assign the specific prefix codes
    based on the superficially sporadic patterns recorded from
    multiple samples.

    This is especially the case considering a Japanese-based
    company is likely to have referred, heavily, to algorithms
    devised by their fellow natives, namely Okumura and Yoshizaki
    with their LZSS, LZARI, and LZHUF routines.

    Looking at Nintendo EAD with their modification of the LZSS
    principles (SLI) that improved compression ratios is a perfect
    example of this observation.

    Now, the trouble is rationalizing a consistent, reliable
    method for weighing and sorting frequencies of disputed values.

    Is it Huffman-based or Arithmetic-based assortment?

    Could it be that it's optimized to minimize branches,
    effectively, favoring decoding performance on target hardware?

    What is the significance or reasoning behind the fact that
    the control bits in the Offsets Tree Header is recorded
    persistently as such:

>   Data Segment: 0x2D475C
>
>   Offsets Tree Header:
>   0 <3>, 0 <6>, 10 <11>, 10 <13>, 0 <16>, 111

    while the control bits in the Length Tree Header is recorded
    persistently as such:

>   Length Tree Header:
>   0 <4>, 0 <5>, 0 <6>, 0 <8>, 1111

    What's the premise behind introducing Leafs after Offset
    Breadths are >= 10?

    How are Prefix Codes for Breadths justified?

>   Group "A":
    Reflects the Header.
    Represents sum of current and preceding breadth frequency values
    (observe Group "B") after the last defined sum.
>   Group "B":
    Represents the frequency of the coinciding breadth.
>   Group "C":
    Represents the number of unique breadth group values.
    e.g. A Breadth of 3 can be the values of 0x4, 0x5, 0x6, 0x7.
    If there are occurrences of 0x4, 0x5, 0x7, but not 0x6,
    there are three unique occurrences belonging to the breadth.

>   Offset Breadth Frequencies

              A        B        C
    -----------------------------
    [ 0]:     0 ->     0 ->     0
    [ 1]:     0 ->    62 ->     1
    [ 2]:     0 ->   497 ->     2
    [ 3]:   980 ->   421 ->     4
    [ 4]:     0 ->   443 ->     8
    [ 5]:     0 ->   552 ->    11
    [ 6]: 1,450 ->   455 ->    19
    [ 7]:     0 ->   405 ->    45
    [ 8]:     0 ->   697 ->    75
    [ 9]:     0 ->   411 ->   103
    [10]:     0 -> 3,521 ->   221
    [11]: 8,144 -> 3,110 ->   361
    [12]:     0 -> 2,384 ->   555
    [13]: 4,371 -> 1,987 ->   801
    [14]:     0 -> 1,808 -> 1,042
    [15]:     0 -> 1,504 -> 1,235
    [16]: 4,725 -> 1,413 -> 1,256

>   Length Breadth Frequencies

              A        B     C
    --------------------------
    [0]:      0 ->     0 ->  0
    [1]:      0 ->     0 ->  0
    [2]:      0 -> 4,650 ->  1
    [3]:      0 -> 8,172 ->  4
    [4]: 16,958 -> 4,136 ->  8
    [5]:  1,585 -> 1,585 -> 16
    [6]:    653 ->   653 -> 32
    [7]:      0 ->   392 -> 61
    [8]:    474 ->    82 -> 36

    Currently at my wits' end, and it is mucho depress-o.
.
.   [ end of document ]
.