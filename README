#####################################################################

    HALKEN vpk0
    v0.75.3

    "White Guy That Don't Smile"
    2022/09/13, Tuesday, September 13th; 0811 HOURS

#####################################################################

Preface:

    From: "Pokémon Snap (USA)"
          and
          "NINTENDO Game Boy Advance SDK 3.0/bin/agbcomp.exe"
          and
          "nvpktool_src/nvpktool.cpp"

    "vpk0" decoding functionality was recovered through the act
    of decompiling the Nintendo 64 title, "Pokémon Snap",
    using "Ghidra", a reverse software engineering suite.

    Lempel-Ziv encoding functionality was based upon the routine
    recovered from "agbcomp.exe" using the aforementioned tool,
    "Ghidra", in addition to, "Snowman", an x86 decompiler.

    The bit-stream routine used in the encoding process draws
    significant reference from "nvpktool" by "CaitSith2",
    however, customizable functionality present in their
    source code will not be implemented as it is not within
    the scope for the goal of this project.

#####################################################################

Description:

    This is a tool that handles HAL's "vpk0" data format.

    It's still a work in progress, however, it is a
    functional program.

    * Can decode vpk0 data; both type 0x00 and type 0x01.
    * Encodes data to a bit-stream LZ format that's supported
      by the decoding routine.

#####################################################################

Instructions:

    I used GCC to build this on 64-bit Linux, Mac, and Windows,
    and have provided a Makefile that may serve as a convenience.

Ensure the following subdirectories exist within the path "vpk0":
"bin"
"src"
_____________________________________________________________________
Confirm the following files are present within these subdirectories:
"vpk0"
    "bin"
    "src"
        "vpk0.c"
    "CHANGELOG"
    "Makefile"
    "README"
    "STATUS"
    "UNLICENSE"
_____________________________________________________________________
"cd" into the work directory that is "vpk0" and type "make".

The "make" command will build "vpk0".

The "make clean" command will remove the executable from the
"bin" subdirectory.
_____________________________________________________________________

Interface:

"vpk0.c" contains the "main()" function and will compile into the
executable needed to process the data defined by this software.

#####################################################################

Motive:

    Nearly 20 years ago, an individual under the alias "CaitSith2"
    successfully reverse-engineered the vpk0 format used by the
    Nintendo e-Reader for the Game Boy Advance.

    This development is certainly no small feat, however, some
    individuals are curious as to whether or not they themselves
    can <fully> reverse-engineer the format, myself included,
    focusing on 1:1 accuracy.

    As of February 2022, only the LZ portion of the format has
    been replicated. The Huffman format has yet to be cracked.

#####################################################################

Special Mentions:

    HAL Laboratory:
        Japan's IBM, to say the least.
        Their vpk0 format keeps me up at night knowing I may never
        be able to deduce their Huffman method....

    CaitSith2:
        Big Brain behind the e-Reader homebrew tools.
        (After comparing your code with what was reproduced via
         Ghidra using a dumped e-Reader ROM for reference, the
         similarities are borderline identical despite the
         15 year gap. Tee-hee.)

    tehzz:
        Recognized for also expressing interest in fully
        reverse-engineering HAL's intriguing rendition of the
        Deflate algorithm.

#####################################################################
